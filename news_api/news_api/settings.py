"""
Django settings for news_api project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hp%b(lh!t*i0#ed_!k57v_^7i5+xb**0b_wkl1l8240*4b#_59'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentication',
    'news',
    'users',
    
    # third party app
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    # 'corsheaders',
    "corsheaders",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # corsheaders

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'news_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/ 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'news_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    # authentication classes for api endpoints 
    #  example jwts tokens for api authentication
    'DEFAULT_AUTHENTICATION_CLASSES' : (
        
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # default permission classes for api endpoints
    # example : requires authentic for all api endpoint by default
      'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
      #pagination class for list views
      # example : splits large result set into pages 
     'DEFAULT_PAGINATION_CLASS': 
        'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5,
    'DEFAULT_FILTER_BACKENDS' : ['django_filters.rest_framework.DjangoFilterBackend'], }
from datetime import timedelta
SIMPLE_JWT = {
    # 60 minutes token lifetime
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    # 7 days refresh token lifetime
    'REFRESH_TOKEN_LIFETIME':timedelta(days=7),
    # enable token rotation and blacklisting
    'ROTATE_REFRESH_TOKENS':True,
    # blacklist after rotation
    'BLACKLIST_AFTER_ROTATION':True,
    # update last login time on token refresh
    'UPDATE_LAST_LOGIN':True,
    
    #ALGORITHM used to sign the tokens
    # EXAMPLE : HS256 IS SECURE AND WIDELY USED
    'ALGORITHM':'HS256',
    # SIGNING KEY for token generation and verification
    'SIGNING_KEY': SECRET_KEY,
    # VERIFYING KEY for asymmetric algorithms
    'VERIFYING_KEY': None,
    # HTTP header types to identify the token
    'AUTH_HEADER_TYPES': ('Bearer',),
    # HTTP header name where the token is expected
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    # Field in the token that identifies the user
    'USER_ID_FIELD': 'id',
    # Claim in the token that contains the user ID
    'USER_ID_CLAIM': 'user_id',
     # Function to retrieve the user based on the token's user ID
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    # Classes of tokens to be used
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    # Claim in the token that specifies its type
    'TOKEN_TYPE_CLAIM': 'token_type',
    
}
# CORS FOR ALL DOMAINS
CORS_ALLOW_ALL_ORIGINS = True

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
STATIC_ROOT = BASE_DIR / 'staticfiles'


# Custom user model with email validation and additional fields 

# example  : uses authentication app's CustomUser model instead of default User model
AUTH_USER_MODEL = 'authentication.CustomUser'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'news_api <news_api@example.com>'
SERVER_EMAIL = DEFAULT_FROM_EMAIL

API_BASE_URL = 'http://127.0.0.1:8000'